pragma solidity ^0.4.17;

contract Loan {
    address private _lender;
    address private _debtor;
    uint256 private _amount;
    uint256 private _durationMonths; // 30 days
    uint256 private _creationTime; //etch github work ethereumetch github work ethereum
    uint256 private _interestRate; // in 0.01% monthly
    uint256 private _monthsToPayLeft;
    uint256 private _monthlyPayment;

    function Loan(address lender,address debtor,uint256 amount,uint256 durationMonths,uint256 interestRate) public {
        _lender = lender;
        _debtor = debtor;
        _amount = amount;
        _durationMonths = durationMonths;
        _creationTime = now;
        _interestRate = interestRate;
        _monthsToPayLeft = durationMonths; 
        _monthlyPayment = amount+amount*interestRate;
    }
    
    // getters

    function getLender() public constant returns (address lender){
        return lender = _lender;
    }

    function getDebtor() public constant returns (address debtor){
        return debtor = _debtor;
    }

    function getAmount() public constant returns (uint256 amount){
        return amount = _amount;
    }

    function getDurationMonths() public constant returns (uint256 durationMonths){
        return durationMonths = _durationMonths;
    }

    function getMonthsLeft() public constant returns (uint256 monthsLeft){

    }
    function getInterestRate() public constant returns (uint256 interestRate){
        return interestRate = _interestRate;
    }

    //sends transaction to the contract
    function () payable public {
        if(msg.sender != _debtor) throw;
        if(msg.value != _monthlyPayment) throw;
        if(_monthsToPayLeft == 0) throw;
        _monthsToPayLeft--;
    }

    function claimPaid() public returns (bool success){
        if(msg.sender != _lender) throw;
        _lender.send(this.balance);
    }


}
